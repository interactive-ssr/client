#+title: issr.js
This is the readme for the client Javascript. Make sure to see the [[https://github.com/interactive-ssr/client/blob/master/main.org][main readme]]
for the ISSR project. issr.js doesn't work alone, it needs to be paired with a server side module such as [[https://github.com/interactive-ssr/hunchenissr][hunchenissr]].

* Getting Started

** 1 Download
Download ~issr.js~ ~issr.min.js~ and serve it on your HTTP server.

** 2 Link Script
Include ~issr.js~ in your web page:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
#+END_SRC

** 3 Setup Connection
Set up the connection to the server:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
      <script noupdate="t">
        setup(«id», «port»)
      </script>
      ...
#+END_SRC
Where ~«id»~ and is the unique id provided by the server for the current HTTP connection and  ~«port»~ is the port your websocket server is listening on (also provided by the ISSR server module). The ~noupdate~ attribute makes sure that the id doesn't change and that ~setup~ isn't called more than once per page.

** 4 Re-Render
Call Re-Render:
#+BEGIN_SRC html
  <button action="action" value="add" onclick="rr(this)">
    I am add button
  </button>
#+END_SRC
Now your server should have a parameter who's name is ~action~ and who's value is "add". All other named elements on the page will be query-string parameters too. ~rr~ takes any number of arguments. The name attribute of any all the named arguments will be unique in the query string. For example the following is equivalent to the previous example (using [[https://json.org][JSON]]): 
#+BEGIN_SRC html
  <button onclick="rr({name='action',value='add'})">
      I am add button
  </button>
#+END_SRC
~rr~ can take any number of arguments like this to give you full control.
It can also take no arguments, in which case it makes no effort to ensure uniqueness.

* Radio Buttons
#+BEGIN_SRC html
    <input type="radio" name="direction" value="north" selected="true"/><label for="north">North</label><br />
    <input type="radio" name="direction" value="east" /><label for="east">East</label><br />
    <input type="radio" name="direction" value="south" /><label for="south">South</label><br />
    <input type="radio" name="direction" value="west" /><label for="west">West</label><br />
    <button action="action" value="submit" onclick="rr(this)">
      Submit
    </button>
#+END_SRC
Pressing the submit button will produce a query string like so: ~action=submit&direction=north~. If no radio button is selected, the name for the radio button will not appear in the query string at all.

* File Upload
#+BEGIN_SRC html
    <input type="file" name="file" />
    <button action="action" value="upload" onclick="rr(this)">
      Upload
    </button>
#+END_SRC
File upload doesn't actually use a query string. The server side module will determine what it looks like on the server.

* Image Maps

** Server Maps
#+BEGIN_SRC html
  <a onclick="rr({action:'smap',value:event.offsetX+','+event.offsetY})">
    <img src="picture.png" ismap />
  </a>
#+END_SRC
Clicking the picture will produce produce include ~smap=x,y~ in the query string where ~x,y~ is the coordinate of the click and ~0,0~ is the top left corner of the picture (y is inverted).

** Client Maps
#+BEGIN_SRC html
  <img src="picture.png" usemap="#cmap"
       width="200" height="200"/>
  <map name="cmap">
    <area onclick="rr({action:'cmap',value:'top-left'})"
          shape="rect" coords="0,0,100,100">
    <area onclick="rr({action:'cmap',value:'top-right'})"
          shape="rect" coords="100,0,200,100">
    <area onclick="rr({action:'cmap',value:'bottom-left'})"
          shape="rect" coords="0,100,100,200">
    <area onclick="rr({action:'cmap',value:'bottom-right'})"
          shape="rect" coords="100,100,200,200">
  </map>
#+END_SRC
Clicking the top left quadrant of the picture will include ~cmap=top-left~ in the query string. See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area][area-tag]] for more options to define differently shaped areas.
