#+title: issr.js
This is the readme for the client Javascript. Make sure to see the [[https://github.com/interactive-ssr/client/blob/master/main.org][main readme]]
for the ISSR project. issr.js doesn't work alone, it needs to be paired with a server side module such as [[https://github.com/interactive-ssr/hunchenissr][hunchenissr]].

* Getting Started

** 1 Download
Download ~issr.js~ ~issr.min.js~ and serve it on your HTTP server.

** 2 Link Script
Include ~issr.js~ in your web page:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
#+END_SRC

** 3 Setup Connection
Set up the connection to the server:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
      <script noupdate="t">
        setup(«id», «port»)
      </script>
      ...
#+END_SRC
Where ~«id»~ and is the unique id provided by the server for the current HTTP connection and  ~«port»~ is the port your websocket server is listening on (also provided by the ISSR server module). The ~noupdate~ attribute makes sure that the id doesn't change and that ~setup~ isn't called more than once per page.

** 4 Re-Render
Call Re-Render:
#+BEGIN_SRC html
  <button action="action" value="add" onclick="rr(this)">
    I am add button
  </button>
#+END_SRC
Now your server should have a parameter who's name is ~action~ and who's value is "add". All other named elements on the page will be query-string parameters too. ~rr~ takes any number of arguments. The name attribute of any all the named arguments will be unique in the query string. For example the following is equivalent to the previous example (using [[https://json.org][JSON]]): 
#+BEGIN_SRC html
  <button onclick="rr({name='action',value='add'})">
      I am add button
  </button>
#+END_SRC
~rr~ can take any number of arguments like this to give you full control.
It can also take no arguments, in which case it makes no effort to ensure uniqueness.

* Radio Buttons
#+BEGIN_SRC html
    <input type="radio" name="direction" value="north" selected="true"/><label for="north">North</label><br />
    <input type="radio" name="direction" value="east" /><label for="east">East</label><br />
    <input type="radio" name="direction" value="south" /><label for="south">South</label><br />
    <input type="radio" name="direction" value="west" /><label for="west">West</label><br />
    <button action="action" value="submit" onclick="rr(this)">
      Submit
    </button>
#+END_SRC
Pressing the submit button will produce a query string like so: ~action=submit&direction=north~. If no radio button is selected, the name for the radio button will not appear in the query string at all.

* File Upload
#+BEGIN_SRC html
    <input type="file" name="file" />
    <button action="action" value="upload" onclick="rr(this)">
      Upload
    </button>
#+END_SRC
File upload doesn't actually use a query string. The server side module will determine what it looks like on the server.

* Image Maps

** Server Maps
#+BEGIN_SRC html
  <a onclick="rr({action:'smap',value:event.offsetX+','+event.offsetY})">
    <img src="picture.png" ismap />
  </a>
#+END_SRC
Clicking the picture will produce produce include ~smap=x,y~ in the query string where ~x,y~ is the coordinate of the click and ~0,0~ is the top left corner of the picture (y is inverted).

** Client Maps
#+BEGIN_SRC html
  <img src="picture.png" usemap="#cmap"
       width="200" height="200"/>
  <map name="cmap">
    <area onclick="rr({action:'cmap',value:'top-left'})"
          shape="rect" coords="0,0,100,100">
    <area onclick="rr({action:'cmap',value:'top-right'})"
          shape="rect" coords="100,0,200,100">
    <area onclick="rr({action:'cmap',value:'bottom-left'})"
          shape="rect" coords="0,100,100,200">
    <area onclick="rr({action:'cmap',value:'bottom-right'})"
          shape="rect" coords="100,100,200,200">
  </map>
#+END_SRC
Clicking the top left quadrant of the picture will include ~cmap=top-left~ in the query string. See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area][area-tag]] for more options to define differently shaped areas.

* Reusable Components
The trick to keeping state is to require reusable components to have the ~id~ attribute. This not only make it unique, but it gives us a string to use as a GET parameter or session variable. The Get parameter can remember any state required by the component. The reason this works is because it is not required for the web programmer to specify GET parameters. The person using a Component doesn't need to worry about the existence of this variable (only not to use it for something else).

** Tab Box
[[https://github.com/interactive-ssr/client/blob/master/tab-box.png]]

The tab-box and tab tags will never make it to the client.
#+BEGIN_SRC html
  <tab-box id="tb-one">
    <tab title="Lorem">
      <p>
        Sit amet...
      </p>
    </tab>
    <tab title="Ipsum">
      <p>
        Nullam...
      </p>
    </tab>
    <tab title="Dolor">
      <p>
        Pellentesque...
      </p>
    </tab>
  </tab-box>
#+END_SRC
For this example will use the [[https://github.com/interactive-ssr/hunchenissr][Hunchenissr]] implementation of ISSR and the [[https://github.com/moderninterpreters/markup][markup]] library for HTML generation.

First, we make the tab tag. The only purpose of this is to not make the user type a colon and ensure that the ~title~ attribute is present because the ~title~ text will be used for the tab buttons.
#+BEGIN_SRC lisp
  (deftag tab (children &key (title (error "tab must have a title")))
    <:tab title=title >
      ,@children
    </:tab>)
#+END_SRC
Second, we make the tab-box tag (~id~ attribute required), 
 #+BEGIN_SRC lisp
   (deftag tab-box (children &key (id (error "tab-box must have an id"))
                    title class style)
 #+END_SRC
 Get list of tab titles, and decide the active one based on the GET parameter.
#+BEGIN_SRC lisp
  (let* ((tabs (mapcar
                ;; get the tag titles
                (lambda (tab)
                  (cdr (assoc "title"
                              (xml-tag-attributes tab)
                              :test #'string=)))
                (remove-if-not
                 ;; remove whitespace and comment elements
                 (lambda (child)
                   (typep child 'xml-tag))
                 children)))
         (active (or (get-parameter id) (first tabs))))
#+END_SRC
Let ~id~ ~class~ and ~style~ attributes fall through to the encompassing ~div~ and put a bold ~title~ if it was provided.
#+BEGIN_SRC html
  <div id=id class=(str:join " " (cons "tab-box" class))
       style=style >
    ,(when title
       <merge-tag>
         <b>,(progn title)</b>
         <br/>
       </merge-tag>)
#+END_SRC
Put a ~nav~ tag to hold the tab buttons. The ~action~ attribute will become the GET parameter with the value of whatever tab is selected. The ~name~ attribute will "remember" which tab we are on when we are not clicking tabs. the ~onclick~ will send the ~value~ to the server through the ~action~ attribute (which is whatever id is id).
#+BEGIN_SRC html
  <nav>
    ,@(mapcar
       (lambda (tab)
         <button action=id
                 name=(when (string= tab active)
                        id)
                 value=tab
                 selected=(string= tab active)
                 onclick="rr(this)">
           ,(progn tab)
         </button>)
       tabs)
  </nav>
#+END_SRC
Dump out the children of the ~tab~ tags out wrapped in ~div~ ~class~ "tab-content", so we can use CSS to chose which ones to hide and show. 
#+BEGIN_SRC lisp
    ,@(mapcar
       (lambda (tab child)
         <div selected=(string= tab active)
              class="tab-content">
           ,@(xml-tag-children child)
         </div>)
       tabs
       (remove-if-not
        ;; remove whitespace or comment elements
        (lambda (child)
          (typep child 'xml-tag))
        children))
  </div>))
#+END_SRC
Lastly, add some CSS to hide the tab content that is not selected. Also lots of stuff to make it look pretty. Some dynamic variables to add customization can't hurt either. The most important thing is the ~display: none~ and ~display: block~.
#+BEGIN_SRC css
  .tab-box {
      --border-color: black;
      --background-color: white;
      --tab-color: lightgrey;
      background: var(--background-color);
      padding: .7rem;
      width: fit-content;
      margin: .5rem;
      border-radius: 5px;
      box-shadow: 0 0 3px black;
  }
  .tab-box > nav {
      color: inherit;
      padding: 0 .5rem 0 .5rem;
      border-bottom: 1px solid var(--border-color);
  }
  .tab-box > b {font-size: 1.3rem;}
  .tab-box > nav > button {
      color:inherit;
      position: relative;
      bottom: -1px;
      margin-bottom: 0;
      border: 1px solid var(--border-color);
      border-radius: 6px 6px 0 0;
      background-color: var(--tab-color);
      cursor: pointer;
  }
  .tab-box > nav > button:focus {outline: none;}
  .tab-box > nav > button[selected] {
      background-color: var(--background-color);
      border-bottom: 1px solid var(--background-color);
      cursor: default;
  }
  .tab-box > .tab-content {display: none;}
  .tab-box > .tab-content[selected] {
      display: block;
      animation: fade 1s;
      animation-delay: .0001s;
      animation-fill-mode: both;
  }
  @keyframes fade {
      0% {opacity: 0}
      100% {opacity: 1}
  }
#+END_SRC
