#+title: Getting Started

* 1
Download ~issr.js~ and serve it on your HTTP server.
* 2
Include ~issr.js~ in your web page:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
#+END_SRC
* 3
Set up the connection to the server:
#+BEGIN_SRC html
  <html>
    <head>
      ...
      <script src="/issr.js"></script>
      <script noupdate="true">
        setup(«id», «port»)
      </script>
      ...
#+END_SRC
Where ~«id»~ and is the unique id provided by the server for the current HTTP connection and  ~«port»~ is the port your websocket server is listening on (also provided by the ISSR server module). The ~noupdate~ attribute makes sure that the id doesn't change and that ~setup~ isn't called more than once per page.
* 4
Call Re-Render:
#+BEGIN_SRC html
  <button onclick="rr(this)" name="action" value="add">
    I am add button
  </button>
#+END_SRC
Now your server should have a parameter who's name is ~action~ and who's value is "add". All other named elements on the page will be query-string parameters too. ~rr~ takes any number of arguments. The name attribute of any all the named arguments will be unique in the query string. For example the following is equivalent to the previous example (using [[https://json.org][JSON]]): 
#+BEGIN_SRC html
  <button onclick="rr({name='action',value='add'})">
      I am add button
  </button>
#+END_SRC
~rr~ can take any number of arguments like this to give you full control.
It can also take no arguments, in which case it makes no effort to ensure uniqueness.
